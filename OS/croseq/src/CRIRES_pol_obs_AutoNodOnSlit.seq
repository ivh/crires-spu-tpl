# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# E.S.O. - VLT project
#
# "@(#) $Id: CRIRES_pol_obs_AutoNodOnSlit.seq 324150 2019-07-19 12:14:50Z cmoins $"
#
# who       when        what
# --------  ----------  -------------------------------------------------------
# ccu/rsc   2019-07-15  No need to read currentAngle, just change POSANG
# ???       ???         created
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   NAME
#   CRIRES_pol_obs_AutoNodOnSlit - Spectropolarimetry
#
#   DESCRIPTION
#   ..
#
#   SEQUENCE
#   1. i) instrument is set up according to acquisition
#     ii) then set up instrument according to optical configuration using P2PP parameters
#         as above
#   2. DPR keywords:
#      DPR.CATG = SCIENCE
#      DPR.TYPE = OBJECT
#
#      - Staring: DPR.TECH =SPECTRUM, DIRECT, OTHER
#        -> SEQ.NABCYCLES = 0,SEQ.JITTER.WIDTH=0
#      - Jittered staring: DPR.TECH =SPECTRUM, DIRECT, JITTER
#        -> SEQ.NABCYCLES = 0,SEQ.JITTER.WIDTH>0
#      - Nodding: DPR.TECH =SPECTRUM, NODDING, OTHER
#        -> SEQ.NABCYCLES > 0,SEQ.JITTER.WIDTH=0
#      - Jittered, nodding: DPR.TECH =SPECTRUM, NODDING, JITTER
#        -> SEQ.NABCYCLES > 0,SEQ.JITTER.WIDTH >0
#   3. perform observing sequence exactly following:
#      ISAAC spec obs AutoNodOnSlit
#
#   SEE ALSO
#   crlibTpl(3), BobTPL(n), tplOBS(3), tplIRACE(3)
#   VLT-SPE-ESO-14500-3485, Issue 1, Date 07.07.06
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

proc CRIRES_pol_obs_AutoNodOnSlit { } {

    tplNew croseqOS os
    croseqTPL_POLNOD tpl

    tpl Execute

    # we ensure that all the beam splitters are stopped 
    os Setup "-function INS1.ROT1.MODE STAT INS1.ROT1.POSANG 0\
                        INS1.ROT2.MODE STAT INS1.ROT2.POSANG 0\
                        INS1.ROT3.MODE STAT INS1.ROT3.POSANG 0\
                        INS1.ROT4.MODE STAT INS1.ROT4.POSANG 0" 

    return ""
}

global croseqClass
catch { delete class $croseqClass }
set croseqClass "croseqTPL_POLNOD"

class croseqTPL_POLNOD {
    inherit croseqTPL_AUTONODONSLIT

    constructor {} {
    }

    protected method Expose { tok nrep fits {nodPos "NONE"}} {
        seeBobVars
        set wave [seq_dbReadSymbolic "<alias>WLEN.filt2" ]
        set posAng $INS(ROT.POSANG)
        set polMode $INS(POL.TYPE) 
        tplLog "Reading values - band: $wave, polMode: $polMode, posAng: $posAng"
        set bsIdx -1
        set rotAngle 0
        set dbAlias "NONE"

        if { $wave == "YJ" && $polMode == "V"} {
            set bsIdx 4
            set derotatorMode "STAT"
            set turretPos "YJ_circular"
            set dbAlias "<alias>POLC2"
            set startAngle [expr $posAng+0]
            set rotAngle 180
        } elseif { $wave == "HK" && $polMode == "V"} {
            set bsIdx 3
            set derotatorMode "STAT"
            set turretPos "HK_circular"
            set dbAlias "<alias>POLC1"
            set startAngle [expr $posAng+0]
            set rotAngle 180
        } elseif { $wave == "YJ" && $polMode == "Q"} {
            set bsIdx 2
            set derotatorMode "SKY"
            set turretPos "YJ_linear"
            set dbAlias "<alias>POLL2"
            set startAngle [expr $posAng+0]
            set rotAngle 90
        }  elseif { $wave == "HK" && $polMode == "Q"} {
            set bsIdx 1
            set derotatorMode "SKY"
            set turretPos "HK_linear"
            set dbAlias "<alias>POLL1"
            set startAngle [expr $posAng+0]
            set rotAngle 90
        }  elseif { $wave == "YJ" && $polMode == "U"} {
            set bsIdx 2
            set derotatorMode "SKY"
            set turretPos "YJ_linear"
            set dbAlias "<alias>POLL2"
            # [TODO] make sure the angle is +45 or -45
            set startAngle [expr $posAng+45]
            set rotAngle 90
        }  elseif { $wave == "HK" && $polMode == "U"} {
            set bsIdx 1
            set derotatorMode "SKY"
            set turretPos "HK_linear"
            set dbAlias "<alias>POLL1"
            set startAngle [expr $posAng+45]
            set rotAngle 90
        } else {
            error  "case wave $wave and polarimetric mode $polMode is not supported"
        }


        # TODO:
        # * Set turret to right position? This is now assumed to be done in acquisition but on the other
        #   hand, this tpl sets OPTI1, so should be either both nor none.
        #   ROT5.POS are 126, 42, 0, 84, 0, 84 for the 6 cases above.
        #
        # * Nodding position offset. The center of the nodPos A and B needs to be not the slit center,
        #   but offset by 1.25" to match the decker holes. This could either be done in the acq-tpl
        #   or here, simply needs to be consistent.
        #   Optimally offsets are accumulated and reversed in a catch-clause, in case the tpl crashes.

        #TODO check that decker position are correct
        set deckerPos("A") "Dek13"
        set deckerPos("B") "Dek24"

        tplLog "Stokes parameter: $polMode, wave: $wave, derotator mode: $derotatorMode"
        tplLog "Starting taking $SEQ(NEXPO) exposures for position $nodPos"

        # move the decker into the right position for the current nodding position
        tplLog "Moving decker to  $deckerPos("$nodPos")"
        os Setup "-function INS.OPTI8.NAME $deckerPos("$nodPos")"

        # we set the turret in the right position 
        os Setup "-function INS1.ROT5.NAME $turretPos" 


        loop i 0 $SEQ(NEXPO) {
            tplLog "Setting starting-angle $startAngle and taking first exposure in current group of four."
            os Setup "-function INS1.ROT${bsIdx}.MODE $derotatorMode INS1.ROT${bsIdx}.POSANG $startAngle" 
            ExposeOnce $fits
       
            os Setup "-function INS1.ROT${bsIdx}.MODE $derotatorMode INS1.ROT${bsIdx}.POSANG [expr $startAngle+$rotAngle]" 
            ExposeOnce $fits
       
            # In linear pol: move the beam-splitter by a further 90 degrees. In circular pol: don't move
            if {$polMode != "V"} {
                os Setup "-function INS1.ROT${bsIdx}.MODE $derotatorMode INS1.ROT${bsIdx}.POSANG [expr $startAngle+$rotAngle+$rotAngle]"
            }
            ExposeOnce $fits
       
            # Circular pol: go back to start angle 
            # Linear pol: rotate forward another step
            if {$polMode == "V"} {
                os Setup "-function INS1.ROT${bsIdx}.MODE $derotatorMode INS1.ROT${bsIdx}.POSANG [expr $startAngle]" 
            } else {
                os Setup "-function INS1.ROT${bsIdx}.MODE $derotatorMode INS1.ROT${bsIdx}.POSANG [expr $startAngle+$rotAngle+$rotAngle+$rotAngle]"
            }
            ExposeOnce $fits
        }
    }

    # getExposureNb returns the total number of exposures
    # n_AB = 0 is a special case: only pos A is exposed
    protected method getExposureNb { nexpo nAB numOuterLoop } {
        if {$nAB == 0} {
	    set nex [expr {$nexpo * $numOuterLoop * 4}] 
            tplLog "nAB == 0, nex: $nex"
        } else {
            set nex [expr {$nexpo * $nAB * 2 * $numOuterLoop * 4}]
            tplLog "nAB > 0, nex $nex"
        }
	return $nex
    }

    #-----------------------------------------------------------------------
    # Expose - run nrep exposures
    #
    private method ExposeOnce { fits } {
        seeBobVars
        os Setup "-function INS.MODE $TPL(MODE) OCS.DET1.IMGNAME [os ImgName]"
        os AddFits $fits
        os Start
        os Wait "-cond CanStartNextObs"
    }


}


#
#___oOo___
